//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(identifier: "com.zhuxing.ZXWeiBo") ?? Bundle.main
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `MainVCSettings.json`.
    static let mainVCSettingsJson = Rswift.FileResource(bundle: R.hostingBundle, name: "MainVCSettings", pathExtension: "json")
    
    /// `bundle.url(forResource: "MainVCSettings", withExtension: "json")`
    static func mainVCSettingsJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mainVCSettingsJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 113 images.
  struct image {
    /// Image `Default-736h_left`.
    static let default736h_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "Default-736h_left")
    /// Image `Default-736h_right`.
    static let default736h_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "Default-736h_right")
    /// Image `Default`.
    static let `default` = Rswift.ImageResource(bundle: R.hostingBundle, name: "Default")
    /// Image `ad_background`.
    static let ad_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "ad_background")
    /// Image `avatar_default_small`.
    static let avatar_default_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_default_small")
    /// Image `avatar_default`.
    static let avatar_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_default")
    /// Image `avatar_enterprise_vip`.
    static let avatar_enterprise_vip = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_enterprise_vip")
    /// Image `avatar_grassroot`.
    static let avatar_grassroot = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_grassroot")
    /// Image `avatar_vgirl`.
    static let avatar_vgirl = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_vgirl")
    /// Image `avatar_vip`.
    static let avatar_vip = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_vip")
    /// Image `common_button_white_disable`.
    static let common_button_white_disable = Rswift.ImageResource(bundle: R.hostingBundle, name: "common_button_white_disable")
    /// Image `common_icon_membership_expired`.
    static let common_icon_membership_expired = Rswift.ImageResource(bundle: R.hostingBundle, name: "common_icon_membership_expired")
    /// Image `common_icon_membership_level1`.
    static let common_icon_membership_level1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "common_icon_membership_level1")
    /// Image `common_icon_membership_level2`.
    static let common_icon_membership_level2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "common_icon_membership_level2")
    /// Image `common_icon_membership_level3`.
    static let common_icon_membership_level3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "common_icon_membership_level3")
    /// Image `common_icon_membership_level4`.
    static let common_icon_membership_level4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "common_icon_membership_level4")
    /// Image `common_icon_membership_level5`.
    static let common_icon_membership_level5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "common_icon_membership_level5")
    /// Image `common_icon_membership_level6`.
    static let common_icon_membership_level6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "common_icon_membership_level6")
    /// Image `common_icon_membership`.
    static let common_icon_membership = Rswift.ImageResource(bundle: R.hostingBundle, name: "common_icon_membership")
    /// Image `navigationbar_arrow_down`.
    static let navigationbar_arrow_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigationbar_arrow_down")
    /// Image `navigationbar_arrow_up`.
    static let navigationbar_arrow_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigationbar_arrow_up")
    /// Image `navigationbar_friendattention_highlighted`.
    static let navigationbar_friendattention_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigationbar_friendattention_highlighted")
    /// Image `navigationbar_friendattention`.
    static let navigationbar_friendattention = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigationbar_friendattention")
    /// Image `navigationbar_pop_highlighted`.
    static let navigationbar_pop_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigationbar_pop_highlighted")
    /// Image `navigationbar_pop`.
    static let navigationbar_pop = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigationbar_pop")
    /// Image `new_feature_1`.
    static let new_feature_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "new_feature_1")
    /// Image `new_feature_2`.
    static let new_feature_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "new_feature_2")
    /// Image `new_feature_3`.
    static let new_feature_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "new_feature_3")
    /// Image `new_feature_4`.
    static let new_feature_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "new_feature_4")
    /// Image `new_feature_button_highlighted`.
    static let new_feature_button_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "new_feature_button_highlighted")
    /// Image `new_feature_button`.
    static let new_feature_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "new_feature_button")
    /// Image `new_feature_finish_button_highlighted`.
    static let new_feature_finish_button_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "new_feature_finish_button_highlighted")
    /// Image `new_feature_finish_button`.
    static let new_feature_finish_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "new_feature_finish_button")
    /// Image `new_feature_share_false`.
    static let new_feature_share_false = Rswift.ImageResource(bundle: R.hostingBundle, name: "new_feature_share_false")
    /// Image `new_feature_share_true`.
    static let new_feature_share_true = Rswift.ImageResource(bundle: R.hostingBundle, name: "new_feature_share_true")
    /// Image `popover_background_left`.
    static let popover_background_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "popover_background_left")
    /// Image `popover_background_right`.
    static let popover_background_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "popover_background_right")
    /// Image `popover_background`.
    static let popover_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "popover_background")
    /// Image `preview_like_icon_disable`.
    static let preview_like_icon_disable = Rswift.ImageResource(bundle: R.hostingBundle, name: "preview_like_icon_disable")
    /// Image `preview_like_icon_highlighted`.
    static let preview_like_icon_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "preview_like_icon_highlighted")
    /// Image `preview_like_icon`.
    static let preview_like_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "preview_like_icon")
    /// Image `qrcode_border`.
    static let qrcode_border = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrcode_border")
    /// Image `qrcode_button_background`.
    static let qrcode_button_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrcode_button_background")
    /// Image `qrcode_embeddedimage_shadow`.
    static let qrcode_embeddedimage_shadow = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrcode_embeddedimage_shadow")
    /// Image `qrcode_navigationbar_background`.
    static let qrcode_navigationbar_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrcode_navigationbar_background")
    /// Image `qrcode_scanline_barcode`.
    static let qrcode_scanline_barcode = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrcode_scanline_barcode")
    /// Image `qrcode_scanline_qrcode`.
    static let qrcode_scanline_qrcode = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrcode_scanline_qrcode")
    /// Image `qrcode_tabbar_background`.
    static let qrcode_tabbar_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrcode_tabbar_background")
    /// Image `qrcode_tabbar_icon_barcode_highlighted`.
    static let qrcode_tabbar_icon_barcode_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrcode_tabbar_icon_barcode_highlighted")
    /// Image `qrcode_tabbar_icon_barcode`.
    static let qrcode_tabbar_icon_barcode = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrcode_tabbar_icon_barcode")
    /// Image `qrcode_tabbar_icon_qrcode_highlighted`.
    static let qrcode_tabbar_icon_qrcode_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrcode_tabbar_icon_qrcode_highlighted")
    /// Image `qrcode_tabbar_icon_qrcode`.
    static let qrcode_tabbar_icon_qrcode = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrcode_tabbar_icon_qrcode")
    /// Image `qrcode_tip_background`.
    static let qrcode_tip_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrcode_tip_background")
    /// Image `tabbar_background`.
    static let tabbar_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_background")
    /// Image `tabbar_compose_background_icon_add`.
    static let tabbar_compose_background_icon_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_background_icon_add")
    /// Image `tabbar_compose_background_icon_close`.
    static let tabbar_compose_background_icon_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_background_icon_close")
    /// Image `tabbar_compose_background_icon_return`.
    static let tabbar_compose_background_icon_return = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_background_icon_return")
    /// Image `tabbar_compose_below_background`.
    static let tabbar_compose_below_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_below_background")
    /// Image `tabbar_compose_below_button_highlighted`.
    static let tabbar_compose_below_button_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_below_button_highlighted")
    /// Image `tabbar_compose_below_button`.
    static let tabbar_compose_below_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_below_button")
    /// Image `tabbar_compose_book`.
    static let tabbar_compose_book = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_book")
    /// Image `tabbar_compose_button_highlighted`.
    static let tabbar_compose_button_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_button_highlighted")
    /// Image `tabbar_compose_button`.
    static let tabbar_compose_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_button")
    /// Image `tabbar_compose_camera`.
    static let tabbar_compose_camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_camera")
    /// Image `tabbar_compose_delete`.
    static let tabbar_compose_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_delete")
    /// Image `tabbar_compose_envelope`.
    static let tabbar_compose_envelope = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_envelope")
    /// Image `tabbar_compose_friend`.
    static let tabbar_compose_friend = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_friend")
    /// Image `tabbar_compose_icon_add_highlighted`.
    static let tabbar_compose_icon_add_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_icon_add_highlighted")
    /// Image `tabbar_compose_icon_add`.
    static let tabbar_compose_icon_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_icon_add")
    /// Image `tabbar_compose_idea`.
    static let tabbar_compose_idea = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_idea")
    /// Image `tabbar_compose_lbs`.
    static let tabbar_compose_lbs = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_lbs")
    /// Image `tabbar_compose_left_button_highlighted`.
    static let tabbar_compose_left_button_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_left_button_highlighted")
    /// Image `tabbar_compose_left_button`.
    static let tabbar_compose_left_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_left_button")
    /// Image `tabbar_compose_more_mask`.
    static let tabbar_compose_more_mask = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_more_mask")
    /// Image `tabbar_compose_more`.
    static let tabbar_compose_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_more")
    /// Image `tabbar_compose_music`.
    static let tabbar_compose_music = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_music")
    /// Image `tabbar_compose_notloaded`.
    static let tabbar_compose_notloaded = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_notloaded")
    /// Image `tabbar_compose_photo`.
    static let tabbar_compose_photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_photo")
    /// Image `tabbar_compose_review`.
    static let tabbar_compose_review = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_review")
    /// Image `tabbar_compose_right_button_highlighted`.
    static let tabbar_compose_right_button_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_right_button_highlighted")
    /// Image `tabbar_compose_right_button`.
    static let tabbar_compose_right_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_right_button")
    /// Image `tabbar_compose_shooting`.
    static let tabbar_compose_shooting = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_shooting")
    /// Image `tabbar_compose_transfer`.
    static let tabbar_compose_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_transfer")
    /// Image `tabbar_compose_video`.
    static let tabbar_compose_video = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_video")
    /// Image `tabbar_compose_voice`.
    static let tabbar_compose_voice = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_voice")
    /// Image `tabbar_compose_wbcamera`.
    static let tabbar_compose_wbcamera = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_wbcamera")
    /// Image `tabbar_compose_weibo`.
    static let tabbar_compose_weibo = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_compose_weibo")
    /// Image `tabbar_discover_highlighted`.
    static let tabbar_discover_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_discover_highlighted")
    /// Image `tabbar_discover`.
    static let tabbar_discover = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_discover")
    /// Image `tabbar_home_highlighted`.
    static let tabbar_home_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_home_highlighted")
    /// Image `tabbar_home`.
    static let tabbar_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_home")
    /// Image `tabbar_message_center_highlighted`.
    static let tabbar_message_center_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_message_center_highlighted")
    /// Image `tabbar_message_center`.
    static let tabbar_message_center = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_message_center")
    /// Image `tabbar_profile_highlighted`.
    static let tabbar_profile_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_profile_highlighted")
    /// Image `tabbar_profile`.
    static let tabbar_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_profile")
    /// Image `tableview_loading@2x副本`.
    static let tableview_loading2x副本 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tableview_loading@2x副本")
    /// Image `tableview_loading`.
    static let tableview_loading = Rswift.ImageResource(bundle: R.hostingBundle, name: "tableview_loading")
    /// Image `tableview_pull_refresh@2x副本`.
    static let tableview_pull_refresh2x副本 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tableview_pull_refresh@2x副本")
    /// Image `tableview_pull_refresh`.
    static let tableview_pull_refresh = Rswift.ImageResource(bundle: R.hostingBundle, name: "tableview_pull_refresh")
    /// Image `timeline_card_bottom_background`.
    static let timeline_card_bottom_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "timeline_card_bottom_background")
    /// Image `timeline_card_bottom_line_highlighted`.
    static let timeline_card_bottom_line_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "timeline_card_bottom_line_highlighted")
    /// Image `timeline_card_middle_background_highlighted`.
    static let timeline_card_middle_background_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "timeline_card_middle_background_highlighted")
    /// Image `timeline_card_middle_background`.
    static let timeline_card_middle_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "timeline_card_middle_background")
    /// Image `timeline_icon_comment`.
    static let timeline_icon_comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "timeline_icon_comment")
    /// Image `timeline_icon_like`.
    static let timeline_icon_like = Rswift.ImageResource(bundle: R.hostingBundle, name: "timeline_icon_like")
    /// Image `timeline_icon_retweet`.
    static let timeline_icon_retweet = Rswift.ImageResource(bundle: R.hostingBundle, name: "timeline_icon_retweet")
    /// Image `timeline_icon_unlike`.
    static let timeline_icon_unlike = Rswift.ImageResource(bundle: R.hostingBundle, name: "timeline_icon_unlike")
    /// Image `visitordiscover_feed_image_house`.
    static let visitordiscover_feed_image_house = Rswift.ImageResource(bundle: R.hostingBundle, name: "visitordiscover_feed_image_house")
    /// Image `visitordiscover_feed_image_smallicon`.
    static let visitordiscover_feed_image_smallicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "visitordiscover_feed_image_smallicon")
    /// Image `visitordiscover_feed_mask_smallicon`.
    static let visitordiscover_feed_mask_smallicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "visitordiscover_feed_mask_smallicon")
    /// Image `visitordiscover_image_message`.
    static let visitordiscover_image_message = Rswift.ImageResource(bundle: R.hostingBundle, name: "visitordiscover_image_message")
    /// Image `visitordiscover_image_profile`.
    static let visitordiscover_image_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "visitordiscover_image_profile")
    /// Image `visitordiscover_signup_logo`.
    static let visitordiscover_signup_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "visitordiscover_signup_logo")
    
    /// `UIImage(named: "Default", bundle: ..., traitCollection: ...)`
    static func `default`(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.`default`, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Default-736h_left", bundle: ..., traitCollection: ...)`
    static func default736h_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.default736h_left, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Default-736h_right", bundle: ..., traitCollection: ...)`
    static func default736h_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.default736h_right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ad_background", bundle: ..., traitCollection: ...)`
    static func ad_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ad_background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "avatar_default", bundle: ..., traitCollection: ...)`
    static func avatar_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_default, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "avatar_default_small", bundle: ..., traitCollection: ...)`
    static func avatar_default_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_default_small, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "avatar_enterprise_vip", bundle: ..., traitCollection: ...)`
    static func avatar_enterprise_vip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_enterprise_vip, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "avatar_grassroot", bundle: ..., traitCollection: ...)`
    static func avatar_grassroot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_grassroot, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "avatar_vgirl", bundle: ..., traitCollection: ...)`
    static func avatar_vgirl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_vgirl, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "avatar_vip", bundle: ..., traitCollection: ...)`
    static func avatar_vip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_vip, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common_button_white_disable", bundle: ..., traitCollection: ...)`
    static func common_button_white_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.common_button_white_disable, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common_icon_membership", bundle: ..., traitCollection: ...)`
    static func common_icon_membership(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.common_icon_membership, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common_icon_membership_expired", bundle: ..., traitCollection: ...)`
    static func common_icon_membership_expired(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.common_icon_membership_expired, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common_icon_membership_level1", bundle: ..., traitCollection: ...)`
    static func common_icon_membership_level1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.common_icon_membership_level1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common_icon_membership_level2", bundle: ..., traitCollection: ...)`
    static func common_icon_membership_level2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.common_icon_membership_level2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common_icon_membership_level3", bundle: ..., traitCollection: ...)`
    static func common_icon_membership_level3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.common_icon_membership_level3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common_icon_membership_level4", bundle: ..., traitCollection: ...)`
    static func common_icon_membership_level4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.common_icon_membership_level4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common_icon_membership_level5", bundle: ..., traitCollection: ...)`
    static func common_icon_membership_level5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.common_icon_membership_level5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common_icon_membership_level6", bundle: ..., traitCollection: ...)`
    static func common_icon_membership_level6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.common_icon_membership_level6, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "navigationbar_arrow_down", bundle: ..., traitCollection: ...)`
    static func navigationbar_arrow_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigationbar_arrow_down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "navigationbar_arrow_up", bundle: ..., traitCollection: ...)`
    static func navigationbar_arrow_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigationbar_arrow_up, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "navigationbar_friendattention", bundle: ..., traitCollection: ...)`
    static func navigationbar_friendattention(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigationbar_friendattention, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "navigationbar_friendattention_highlighted", bundle: ..., traitCollection: ...)`
    static func navigationbar_friendattention_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigationbar_friendattention_highlighted, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "navigationbar_pop", bundle: ..., traitCollection: ...)`
    static func navigationbar_pop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigationbar_pop, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "navigationbar_pop_highlighted", bundle: ..., traitCollection: ...)`
    static func navigationbar_pop_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigationbar_pop_highlighted, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "new_feature_1", bundle: ..., traitCollection: ...)`
    static func new_feature_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.new_feature_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "new_feature_2", bundle: ..., traitCollection: ...)`
    static func new_feature_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.new_feature_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "new_feature_3", bundle: ..., traitCollection: ...)`
    static func new_feature_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.new_feature_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "new_feature_4", bundle: ..., traitCollection: ...)`
    static func new_feature_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.new_feature_4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "new_feature_button", bundle: ..., traitCollection: ...)`
    static func new_feature_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.new_feature_button, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "new_feature_button_highlighted", bundle: ..., traitCollection: ...)`
    static func new_feature_button_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.new_feature_button_highlighted, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "new_feature_finish_button", bundle: ..., traitCollection: ...)`
    static func new_feature_finish_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.new_feature_finish_button, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "new_feature_finish_button_highlighted", bundle: ..., traitCollection: ...)`
    static func new_feature_finish_button_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.new_feature_finish_button_highlighted, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "new_feature_share_false", bundle: ..., traitCollection: ...)`
    static func new_feature_share_false(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.new_feature_share_false, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "new_feature_share_true", bundle: ..., traitCollection: ...)`
    static func new_feature_share_true(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.new_feature_share_true, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "popover_background", bundle: ..., traitCollection: ...)`
    static func popover_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popover_background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "popover_background_left", bundle: ..., traitCollection: ...)`
    static func popover_background_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popover_background_left, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "popover_background_right", bundle: ..., traitCollection: ...)`
    static func popover_background_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popover_background_right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "preview_like_icon", bundle: ..., traitCollection: ...)`
    static func preview_like_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.preview_like_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "preview_like_icon_disable", bundle: ..., traitCollection: ...)`
    static func preview_like_icon_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.preview_like_icon_disable, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "preview_like_icon_highlighted", bundle: ..., traitCollection: ...)`
    static func preview_like_icon_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.preview_like_icon_highlighted, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qrcode_border", bundle: ..., traitCollection: ...)`
    static func qrcode_border(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode_border, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qrcode_button_background", bundle: ..., traitCollection: ...)`
    static func qrcode_button_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode_button_background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qrcode_embeddedimage_shadow", bundle: ..., traitCollection: ...)`
    static func qrcode_embeddedimage_shadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode_embeddedimage_shadow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qrcode_navigationbar_background", bundle: ..., traitCollection: ...)`
    static func qrcode_navigationbar_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode_navigationbar_background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qrcode_scanline_barcode", bundle: ..., traitCollection: ...)`
    static func qrcode_scanline_barcode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode_scanline_barcode, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qrcode_scanline_qrcode", bundle: ..., traitCollection: ...)`
    static func qrcode_scanline_qrcode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode_scanline_qrcode, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qrcode_tabbar_background", bundle: ..., traitCollection: ...)`
    static func qrcode_tabbar_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode_tabbar_background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qrcode_tabbar_icon_barcode", bundle: ..., traitCollection: ...)`
    static func qrcode_tabbar_icon_barcode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode_tabbar_icon_barcode, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qrcode_tabbar_icon_barcode_highlighted", bundle: ..., traitCollection: ...)`
    static func qrcode_tabbar_icon_barcode_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode_tabbar_icon_barcode_highlighted, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qrcode_tabbar_icon_qrcode", bundle: ..., traitCollection: ...)`
    static func qrcode_tabbar_icon_qrcode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode_tabbar_icon_qrcode, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qrcode_tabbar_icon_qrcode_highlighted", bundle: ..., traitCollection: ...)`
    static func qrcode_tabbar_icon_qrcode_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode_tabbar_icon_qrcode_highlighted, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qrcode_tip_background", bundle: ..., traitCollection: ...)`
    static func qrcode_tip_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode_tip_background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_background", bundle: ..., traitCollection: ...)`
    static func tabbar_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_background_icon_add", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_background_icon_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_background_icon_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_background_icon_close", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_background_icon_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_background_icon_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_background_icon_return", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_background_icon_return(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_background_icon_return, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_below_background", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_below_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_below_background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_below_button", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_below_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_below_button, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_below_button_highlighted", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_below_button_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_below_button_highlighted, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_book", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_book(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_book, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_button", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_button, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_button_highlighted", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_button_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_button_highlighted, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_camera", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_camera, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_delete", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_delete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_envelope", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_envelope(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_envelope, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_friend", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_friend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_friend, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_icon_add", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_icon_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_icon_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_icon_add_highlighted", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_icon_add_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_icon_add_highlighted, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_idea", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_idea(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_idea, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_lbs", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_lbs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_lbs, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_left_button", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_left_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_left_button, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_left_button_highlighted", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_left_button_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_left_button_highlighted, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_more", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_more_mask", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_more_mask(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_more_mask, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_music", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_music(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_music, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_notloaded", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_notloaded(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_notloaded, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_photo", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_photo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_review", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_review(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_review, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_right_button", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_right_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_right_button, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_right_button_highlighted", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_right_button_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_right_button_highlighted, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_shooting", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_shooting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_shooting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_transfer", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_transfer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_video", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_video(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_video, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_voice", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_voice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_voice, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_wbcamera", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_wbcamera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_wbcamera, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_compose_weibo", bundle: ..., traitCollection: ...)`
    static func tabbar_compose_weibo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_compose_weibo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_discover", bundle: ..., traitCollection: ...)`
    static func tabbar_discover(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_discover, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_discover_highlighted", bundle: ..., traitCollection: ...)`
    static func tabbar_discover_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_discover_highlighted, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_home", bundle: ..., traitCollection: ...)`
    static func tabbar_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_home_highlighted", bundle: ..., traitCollection: ...)`
    static func tabbar_home_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_home_highlighted, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_message_center", bundle: ..., traitCollection: ...)`
    static func tabbar_message_center(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_message_center, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_message_center_highlighted", bundle: ..., traitCollection: ...)`
    static func tabbar_message_center_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_message_center_highlighted, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_profile", bundle: ..., traitCollection: ...)`
    static func tabbar_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_profile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_profile_highlighted", bundle: ..., traitCollection: ...)`
    static func tabbar_profile_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_profile_highlighted, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tableview_loading", bundle: ..., traitCollection: ...)`
    static func tableview_loading(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tableview_loading, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tableview_loading@2x副本", bundle: ..., traitCollection: ...)`
    static func tableview_loading2x副本(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tableview_loading2x副本, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tableview_pull_refresh", bundle: ..., traitCollection: ...)`
    static func tableview_pull_refresh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tableview_pull_refresh, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tableview_pull_refresh@2x副本", bundle: ..., traitCollection: ...)`
    static func tableview_pull_refresh2x副本(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tableview_pull_refresh2x副本, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "timeline_card_bottom_background", bundle: ..., traitCollection: ...)`
    static func timeline_card_bottom_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.timeline_card_bottom_background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "timeline_card_bottom_line_highlighted", bundle: ..., traitCollection: ...)`
    static func timeline_card_bottom_line_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.timeline_card_bottom_line_highlighted, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "timeline_card_middle_background", bundle: ..., traitCollection: ...)`
    static func timeline_card_middle_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.timeline_card_middle_background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "timeline_card_middle_background_highlighted", bundle: ..., traitCollection: ...)`
    static func timeline_card_middle_background_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.timeline_card_middle_background_highlighted, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "timeline_icon_comment", bundle: ..., traitCollection: ...)`
    static func timeline_icon_comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.timeline_icon_comment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "timeline_icon_like", bundle: ..., traitCollection: ...)`
    static func timeline_icon_like(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.timeline_icon_like, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "timeline_icon_retweet", bundle: ..., traitCollection: ...)`
    static func timeline_icon_retweet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.timeline_icon_retweet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "timeline_icon_unlike", bundle: ..., traitCollection: ...)`
    static func timeline_icon_unlike(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.timeline_icon_unlike, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "visitordiscover_feed_image_house", bundle: ..., traitCollection: ...)`
    static func visitordiscover_feed_image_house(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visitordiscover_feed_image_house, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "visitordiscover_feed_image_smallicon", bundle: ..., traitCollection: ...)`
    static func visitordiscover_feed_image_smallicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visitordiscover_feed_image_smallicon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "visitordiscover_feed_mask_smallicon", bundle: ..., traitCollection: ...)`
    static func visitordiscover_feed_mask_smallicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visitordiscover_feed_mask_smallicon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "visitordiscover_image_message", bundle: ..., traitCollection: ...)`
    static func visitordiscover_image_message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visitordiscover_image_message, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "visitordiscover_image_profile", bundle: ..., traitCollection: ...)`
    static func visitordiscover_image_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visitordiscover_image_profile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "visitordiscover_signup_logo", bundle: ..., traitCollection: ...)`
    static func visitordiscover_signup_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visitordiscover_signup_logo, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    /// Nib `HomeForWordTableViewCell`.
    static let homeForWordTableViewCell = _R.nib._HomeForWordTableViewCell()
    /// Nib `HomePicCell`.
    static let homePicCell = _R.nib._HomePicCell()
    /// Nib `HomeTableViewCell`.
    static let homeTableViewCell = _R.nib._HomeTableViewCell()
    /// Nib `Refresh`.
    static let refresh = _R.nib._Refresh()
    /// Nib `VistorView`.
    static let vistorView = _R.nib._VistorView()
    
    /// `UINib(name: "HomeForWordTableViewCell", in: bundle)`
    static func homeForWordTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeForWordTableViewCell)
    }
    
    /// `UINib(name: "HomePicCell", in: bundle)`
    static func homePicCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homePicCell)
    }
    
    /// `UINib(name: "HomeTableViewCell", in: bundle)`
    static func homeTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeTableViewCell)
    }
    
    /// `UINib(name: "Refresh", in: bundle)`
    static func refresh(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.refresh)
    }
    
    /// `UINib(name: "VistorView", in: bundle)`
    static func vistorView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.vistorView)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 4 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `HomePicCell`.
    static let homePicCell: Rswift.ReuseIdentifier<HomePicCell> = Rswift.ReuseIdentifier(identifier: "HomePicCell")
    /// Reuse identifier `NewFeatrueCell`.
    static let newFeatrueCell: Rswift.ReuseIdentifier<ZXNewFeatrueCell> = Rswift.ReuseIdentifier(identifier: "NewFeatrueCell")
    /// Reuse identifier `forwordCell`.
    static let forwordCell: Rswift.ReuseIdentifier<HomeForWordTableViewCell> = Rswift.ReuseIdentifier(identifier: "forwordCell")
    /// Reuse identifier `homeCell`.
    static let homeCell: Rswift.ReuseIdentifier<HomeTableViewCell> = Rswift.ReuseIdentifier(identifier: "homeCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 6 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `NewFeatrue`.
    static let newFeatrue = _R.storyboard.newFeatrue()
    /// Storyboard `OAuth`.
    static let oAuth = _R.storyboard.oAuth()
    /// Storyboard `Popover`.
    static let popover = _R.storyboard.popover()
    /// Storyboard `QRCode`.
    static let qRCode = _R.storyboard.qRCode()
    /// Storyboard `Welcome`.
    static let welcome = _R.storyboard.welcome()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "NewFeatrue", bundle: ...)`
    static func newFeatrue(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.newFeatrue)
    }
    
    /// `UIStoryboard(name: "OAuth", bundle: ...)`
    static func oAuth(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.oAuth)
    }
    
    /// `UIStoryboard(name: "Popover", bundle: ...)`
    static func popover(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.popover)
    }
    
    /// `UIStoryboard(name: "QRCode", bundle: ...)`
    static func qRCode(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.qRCode)
    }
    
    /// `UIStoryboard(name: "Welcome", bundle: ...)`
    static func welcome(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.welcome)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _HomeForWordTableViewCell.validate()
      try _VistorView.validate()
      try _HomeTableViewCell.validate()
      try _Refresh.validate()
    }
    
    struct _HomeForWordTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeForWordTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "forwordCell"
      let name = "HomeForWordTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HomeForWordTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeForWordTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "timeline_card_bottom_background") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'timeline_card_bottom_background' is used in nib 'HomeForWordTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "timeline_icon_like") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'timeline_icon_like' is used in nib 'HomeForWordTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "timeline_icon_unlike") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'timeline_icon_unlike' is used in nib 'HomeForWordTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "timeline_card_bottom_line_highlighted") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'timeline_card_bottom_line_highlighted' is used in nib 'HomeForWordTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "common_icon_membership_level1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'common_icon_membership_level1' is used in nib 'HomeForWordTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "timeline_icon_comment") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'timeline_icon_comment' is used in nib 'HomeForWordTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "timeline_icon_retweet") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'timeline_icon_retweet' is used in nib 'HomeForWordTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _HomePicCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HomePicCell
      
      let bundle = R.hostingBundle
      let identifier = "HomePicCell"
      let name = "HomePicCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HomePicCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomePicCell
      }
      
      fileprivate init() {}
    }
    
    struct _HomeTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "homeCell"
      let name = "HomeTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HomeTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "timeline_card_bottom_background") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'timeline_card_bottom_background' is used in nib 'HomeTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "timeline_icon_like") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'timeline_icon_like' is used in nib 'HomeTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "timeline_icon_unlike") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'timeline_icon_unlike' is used in nib 'HomeTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "timeline_card_bottom_line_highlighted") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'timeline_card_bottom_line_highlighted' is used in nib 'HomeTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "common_icon_membership_level1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'common_icon_membership_level1' is used in nib 'HomeTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "timeline_icon_comment") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'timeline_icon_comment' is used in nib 'HomeTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "timeline_icon_retweet") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'timeline_icon_retweet' is used in nib 'HomeTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _Refresh: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Refresh"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> Refresh? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Refresh
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "tableview_loading") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tableview_loading' is used in nib 'Refresh', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tableview_pull_refresh") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tableview_pull_refresh' is used in nib 'Refresh', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _VistorView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "VistorView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> VistorView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VistorView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "common_button_white_disable") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'common_button_white_disable' is used in nib 'VistorView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "visitordiscover_feed_mask_smallicon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'visitordiscover_feed_mask_smallicon' is used in nib 'VistorView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "visitordiscover_feed_image_smallicon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'visitordiscover_feed_image_smallicon' is used in nib 'VistorView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "visitordiscover_feed_image_house") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'visitordiscover_feed_image_house' is used in nib 'VistorView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try welcome.validate()
      try qRCode.validate()
      try launchScreen.validate()
      try popover.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "Default") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Default' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct newFeatrue: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = NewFeatrueViewController
      
      let bundle = R.hostingBundle
      let name = "NewFeatrue"
      
      fileprivate init() {}
    }
    
    struct oAuth: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "OAuth"
      
      fileprivate init() {}
    }
    
    struct popover: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "Popover"
      
      static func validate() throws {
        if UIKit.UIImage(named: "popover_background") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'popover_background' is used in storyboard 'Popover', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct qRCode: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "QRCode"
      
      static func validate() throws {
        if UIKit.UIImage(named: "qrcode_tabbar_icon_qrcode") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qrcode_tabbar_icon_qrcode' is used in storyboard 'QRCode', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qrcode_border") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qrcode_border' is used in storyboard 'QRCode', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qrcode_scanline_qrcode") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qrcode_scanline_qrcode' is used in storyboard 'QRCode', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qrcode_tabbar_icon_barcode") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qrcode_tabbar_icon_barcode' is used in storyboard 'QRCode', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct welcome: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = WelcomeViewController
      
      let bundle = R.hostingBundle
      let name = "Welcome"
      
      static func validate() throws {
        if UIKit.UIImage(named: "ad_background") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ad_background' is used in storyboard 'Welcome', but couldn't be loaded.") }
        if UIKit.UIImage(named: "avatar_default_big") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'avatar_default_big' is used in storyboard 'Welcome', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}